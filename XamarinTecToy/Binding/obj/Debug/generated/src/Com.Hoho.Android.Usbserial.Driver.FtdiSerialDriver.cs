//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Hoho.Android.Usbserial.Driver {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver']"
	[global::Android.Runtime.Register ("com/hoho/android/usbserial/driver/FtdiSerialDriver", DoNotGenerateAcw=true)]
	public partial class FtdiSerialDriver : global::Java.Lang.Object, global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialDriver {
		// Metadata.xml XPath class reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']"
		[global::Android.Runtime.Register ("com/hoho/android/usbserial/driver/FtdiSerialDriver$FtdiSerialPort", DoNotGenerateAcw=true)]
		public partial class FtdiSerialPort : global::Com.Hoho.Android.Usbserial.Driver.CommonUsbSerialPort {
			static readonly JniPeerMembers _members = new XAPeerMembers ("com/hoho/android/usbserial/driver/FtdiSerialDriver$FtdiSerialPort", typeof (FtdiSerialPort));

			internal static new IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			protected FtdiSerialPort (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/constructor[@name='FtdiSerialDriver.FtdiSerialPort' and count(parameter)=3 and parameter[1][@type='com.hoho.android.usbserial.driver.FtdiSerialDriver'] and parameter[2][@type='android.hardware.usb.UsbDevice'] and parameter[3][@type='int']]"
			[Register (".ctor", "(Lcom/hoho/android/usbserial/driver/FtdiSerialDriver;Landroid/hardware/usb/UsbDevice;I)V", "")]
			public unsafe FtdiSerialPort (global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver __self, global::Android.Hardware.Usb.UsbDevice p0, int p1) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				string __id = "(L" + global::Android.Runtime.JNIEnv.GetJniName (GetType ().DeclaringType) + ";Landroid/hardware/usb/UsbDevice;I)V";

				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;

				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [3];
					__args [0] = new JniArgumentValue ((__self == null) ? IntPtr.Zero : ((global::Java.Lang.Object) __self).Handle);
					__args [1] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
					__args [2] = new JniArgumentValue (p1);
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
					SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
					_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (__self);
					global::System.GC.KeepAlive (p0);
				}
			}

			static Delegate cb_getControlLines;
#pragma warning disable 0169
			static Delegate GetGetControlLinesHandler ()
			{
				if (cb_getControlLines == null)
					cb_getControlLines = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetControlLines));
				return cb_getControlLines;
			}

			static IntPtr n_GetControlLines (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return JNIEnv.ToLocalJniHandle (__this.ControlLines);
			}
#pragma warning restore 0169

			public override unsafe global::Java.Util.EnumSet ControlLines {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='getControlLines' and count(parameter)=0]"
				[Register ("getControlLines", "()Ljava/util/EnumSet;", "GetGetControlLinesHandler")]
				get {
					const string __id = "getControlLines.()Ljava/util/EnumSet;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Lang.Object.GetObject<global::Java.Util.EnumSet> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

			static Delegate cb_getDriver;
#pragma warning disable 0169
			static Delegate GetGetDriverHandler ()
			{
				if (cb_getDriver == null)
					cb_getDriver = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetDriver));
				return cb_getDriver;
			}

			static IntPtr n_GetDriver (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return JNIEnv.ToLocalJniHandle (__this.Driver);
			}
#pragma warning restore 0169

			public override unsafe global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialDriver Driver {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='getDriver' and count(parameter)=0]"
				[Register ("getDriver", "()Lcom/hoho/android/usbserial/driver/UsbSerialDriver;", "GetGetDriverHandler")]
				get {
					const string __id = "getDriver.()Lcom/hoho/android/usbserial/driver/UsbSerialDriver;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialDriver> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

			static Delegate cb_getLatencyTimer;
#pragma warning disable 0169
			static Delegate GetGetLatencyTimerHandler ()
			{
				if (cb_getLatencyTimer == null)
					cb_getLatencyTimer = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_GetLatencyTimer));
				return cb_getLatencyTimer;
			}

			static int n_GetLatencyTimer (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.LatencyTimer;
			}
#pragma warning restore 0169

			static Delegate cb_setLatencyTimer_I;
#pragma warning disable 0169
			static Delegate GetSetLatencyTimer_IHandler ()
			{
				if (cb_setLatencyTimer_I == null)
					cb_setLatencyTimer_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_SetLatencyTimer_I));
				return cb_setLatencyTimer_I;
			}

			static void n_SetLatencyTimer_I (IntPtr jnienv, IntPtr native__this, int p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.LatencyTimer = p0;
			}
#pragma warning restore 0169

			public virtual unsafe int LatencyTimer {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='getLatencyTimer' and count(parameter)=0]"
				[Register ("getLatencyTimer", "()I", "GetGetLatencyTimerHandler")]
				get {
					const string __id = "getLatencyTimer.()I";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
						return __rm;
					} finally {
					}
				}
				// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='setLatencyTimer' and count(parameter)=1 and parameter[1][@type='int']]"
				[Register ("setLatencyTimer", "(I)V", "GetSetLatencyTimer_IHandler")]
				set {
					const string __id = "setLatencyTimer.(I)V";
					try {
						JniArgumentValue* __args = stackalloc JniArgumentValue [1];
						__args [0] = new JniArgumentValue (value);
						_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
					} finally {
					}
				}
			}

			static Delegate cb_getSupportedControlLines;
#pragma warning disable 0169
			static Delegate GetGetSupportedControlLinesHandler ()
			{
				if (cb_getSupportedControlLines == null)
					cb_getSupportedControlLines = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetSupportedControlLines));
				return cb_getSupportedControlLines;
			}

			static IntPtr n_GetSupportedControlLines (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return JNIEnv.ToLocalJniHandle (__this.SupportedControlLines);
			}
#pragma warning restore 0169

			public override unsafe global::Java.Util.EnumSet SupportedControlLines {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='getSupportedControlLines' and count(parameter)=0]"
				[Register ("getSupportedControlLines", "()Ljava/util/EnumSet;", "GetGetSupportedControlLinesHandler")]
				get {
					const string __id = "getSupportedControlLines.()Ljava/util/EnumSet;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Lang.Object.GetObject<global::Java.Util.EnumSet> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

			static Delegate cb_closeInt;
#pragma warning disable 0169
			static Delegate GetCloseIntHandler ()
			{
				if (cb_closeInt == null)
					cb_closeInt = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_CloseInt));
				return cb_closeInt;
			}

			static void n_CloseInt (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.CloseInt ();
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='closeInt' and count(parameter)=0]"
			[Register ("closeInt", "()V", "GetCloseIntHandler")]
			public override unsafe void CloseInt ()
			{
				const string __id = "closeInt.()V";
				try {
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
				} finally {
				}
			}

			static Delegate cb_openInt_Landroid_hardware_usb_UsbDeviceConnection_;
#pragma warning disable 0169
			static Delegate GetOpenInt_Landroid_hardware_usb_UsbDeviceConnection_Handler ()
			{
				if (cb_openInt_Landroid_hardware_usb_UsbDeviceConnection_ == null)
					cb_openInt_Landroid_hardware_usb_UsbDeviceConnection_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_OpenInt_Landroid_hardware_usb_UsbDeviceConnection_));
				return cb_openInt_Landroid_hardware_usb_UsbDeviceConnection_;
			}

			static void n_OpenInt_Landroid_hardware_usb_UsbDeviceConnection_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDeviceConnection> (native_p0, JniHandleOwnership.DoNotTransfer);
				__this.OpenInt (p0);
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='openInt' and count(parameter)=1 and parameter[1][@type='android.hardware.usb.UsbDeviceConnection']]"
			[Register ("openInt", "(Landroid/hardware/usb/UsbDeviceConnection;)V", "GetOpenInt_Landroid_hardware_usb_UsbDeviceConnection_Handler")]
			public override unsafe void OpenInt (global::Android.Hardware.Usb.UsbDeviceConnection p0)
			{
				const string __id = "openInt.(Landroid/hardware/usb/UsbDeviceConnection;)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (p0);
				}
			}

			static Delegate cb_setParameters_IIII;
#pragma warning disable 0169
			static Delegate GetSetParameters_IIIIHandler ()
			{
				if (cb_setParameters_IIII == null)
					cb_setParameters_IIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIII_V (n_SetParameters_IIII));
				return cb_setParameters_IIII;
			}

			static void n_SetParameters_IIII (IntPtr jnienv, IntPtr native__this, int p0, int p1, int p2, int p3)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver.FtdiSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.SetParameters (p0, p1, p2, p3);
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver.FtdiSerialPort']/method[@name='setParameters' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
			[Register ("setParameters", "(IIII)V", "GetSetParameters_IIIIHandler")]
			public override unsafe void SetParameters (int p0, int p1, int p2, int p3)
			{
				const string __id = "setParameters.(IIII)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [4];
					__args [0] = new JniArgumentValue (p0);
					__args [1] = new JniArgumentValue (p1);
					__args [2] = new JniArgumentValue (p2);
					__args [3] = new JniArgumentValue (p3);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/hoho/android/usbserial/driver/FtdiSerialDriver", typeof (FtdiSerialDriver));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected FtdiSerialDriver (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver']/constructor[@name='FtdiSerialDriver' and count(parameter)=1 and parameter[1][@type='android.hardware.usb.UsbDevice']]"
		[Register (".ctor", "(Landroid/hardware/usb/UsbDevice;)V", "")]
		public unsafe FtdiSerialDriver (global::Android.Hardware.Usb.UsbDevice p0) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Landroid/hardware/usb/UsbDevice;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_getDevice;
#pragma warning disable 0169
		static Delegate GetGetDeviceHandler ()
		{
			if (cb_getDevice == null)
				cb_getDevice = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetDevice));
			return cb_getDevice;
		}

		static IntPtr n_GetDevice (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.Device);
		}
#pragma warning restore 0169

		public virtual unsafe global::Android.Hardware.Usb.UsbDevice Device {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver']/method[@name='getDevice' and count(parameter)=0]"
			[Register ("getDevice", "()Landroid/hardware/usb/UsbDevice;", "GetGetDeviceHandler")]
			get {
				const string __id = "getDevice.()Landroid/hardware/usb/UsbDevice;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate cb_getPorts;
#pragma warning disable 0169
		static Delegate GetGetPortsHandler ()
		{
			if (cb_getPorts == null)
				cb_getPorts = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetPorts));
			return cb_getPorts;
		}

		static IntPtr n_GetPorts (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Driver.FtdiSerialDriver> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return global::Android.Runtime.JavaList<global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialPort>.ToLocalJniHandle (__this.Ports);
		}
#pragma warning restore 0169

		public virtual unsafe global::System.Collections.Generic.IList<global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialPort> Ports {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver']/method[@name='getPorts' and count(parameter)=0]"
			[Register ("getPorts", "()Ljava/util/List;", "GetGetPortsHandler")]
			get {
				const string __id = "getPorts.()Ljava/util/List;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Android.Runtime.JavaList<global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialPort>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe global::System.Collections.Generic.IDictionary<global::Java.Lang.Integer, int[]> SupportedDevices {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.driver']/class[@name='FtdiSerialDriver']/method[@name='getSupportedDevices' and count(parameter)=0]"
			[Register ("getSupportedDevices", "()Ljava/util/Map;", "")]
			get {
				const string __id = "getSupportedDevices.()Ljava/util/Map;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Android.Runtime.JavaDictionary<global::Java.Lang.Integer, int[]>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

	}
}
