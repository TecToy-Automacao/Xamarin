//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Hoho.Android.Usbserial.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']"
	[global::Android.Runtime.Register ("com/hoho/android/usbserial/util/SerialInputOutputManager", DoNotGenerateAcw=true)]
	public partial class SerialInputOutputManager : global::Java.Lang.Object, global::Java.Lang.IRunnable {
		// Metadata.xml XPath interface reference: path="/api/package[@name='com.hoho.android.usbserial.util']/interface[@name='SerialInputOutputManager.Listener']"
		[Register ("com/hoho/android/usbserial/util/SerialInputOutputManager$Listener", "", "Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager/IListenerInvoker")]
		public partial interface IListener : IJavaObject, IJavaPeerable {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/interface[@name='SerialInputOutputManager.Listener']/method[@name='onNewData' and count(parameter)=1 and parameter[1][@type='byte[]']]"
			[Register ("onNewData", "([B)V", "GetOnNewData_arrayBHandler:Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager/IListenerInvoker, Binding")]
			void OnNewData (byte[] p0);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/interface[@name='SerialInputOutputManager.Listener']/method[@name='onRunError' and count(parameter)=1 and parameter[1][@type='java.lang.Exception']]"
			[Register ("onRunError", "(Ljava/lang/Exception;)V", "GetOnRunError_Ljava_lang_Exception_Handler:Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager/IListenerInvoker, Binding")]
			void OnRunError (global::Java.Lang.Exception p0);

		}

		[global::Android.Runtime.Register ("com/hoho/android/usbserial/util/SerialInputOutputManager$Listener", DoNotGenerateAcw=true)]
		internal partial class IListenerInvoker : global::Java.Lang.Object, IListener {
			static readonly JniPeerMembers _members = new XAPeerMembers ("com/hoho/android/usbserial/util/SerialInputOutputManager$Listener", typeof (IListenerInvoker));

			static IntPtr java_class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return class_ref; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			IntPtr class_ref;

			public static IListener GetObject (IntPtr handle, JniHandleOwnership transfer)
			{
				return global::Java.Lang.Object.GetObject<IListener> (handle, transfer);
			}

			static IntPtr Validate (IntPtr handle)
			{
				if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
					throw new InvalidCastException ($"Unable to convert instance of type '{JNIEnv.GetClassNameFromInstance (handle)}' to type 'com.hoho.android.usbserial.util.SerialInputOutputManager.Listener'.");
				return handle;
			}

			protected override void Dispose (bool disposing)
			{
				if (this.class_ref != IntPtr.Zero)
					JNIEnv.DeleteGlobalRef (this.class_ref);
				this.class_ref = IntPtr.Zero;
				base.Dispose (disposing);
			}

			public IListenerInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
			{
				IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
				this.class_ref = JNIEnv.NewGlobalRef (local_ref);
				JNIEnv.DeleteLocalRef (local_ref);
			}

			static Delegate cb_onNewData_arrayB;
#pragma warning disable 0169
			static Delegate GetOnNewData_arrayBHandler ()
			{
				if (cb_onNewData_arrayB == null)
					cb_onNewData_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_OnNewData_arrayB));
				return cb_onNewData_arrayB;
			}

			static void n_OnNewData_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = (byte[]) JNIEnv.GetArray (native_p0, JniHandleOwnership.DoNotTransfer, typeof (byte));
				__this.OnNewData (p0);
				if (p0 != null)
					JNIEnv.CopyArray (p0, native_p0);
			}
#pragma warning restore 0169

			IntPtr id_onNewData_arrayB;
			public unsafe void OnNewData (byte[] p0)
			{
				if (id_onNewData_arrayB == IntPtr.Zero)
					id_onNewData_arrayB = JNIEnv.GetMethodID (class_ref, "onNewData", "([B)V");
				IntPtr native_p0 = JNIEnv.NewArray (p0);
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (native_p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onNewData_arrayB, __args);
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}

			static Delegate cb_onRunError_Ljava_lang_Exception_;
#pragma warning disable 0169
			static Delegate GetOnRunError_Ljava_lang_Exception_Handler ()
			{
				if (cb_onRunError_Ljava_lang_Exception_ == null)
					cb_onRunError_Ljava_lang_Exception_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_OnRunError_Ljava_lang_Exception_));
				return cb_onRunError_Ljava_lang_Exception_;
			}

			static void n_OnRunError_Ljava_lang_Exception_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = global::Java.Lang.Object.GetObject<global::Java.Lang.Exception> (native_p0, JniHandleOwnership.DoNotTransfer);
				__this.OnRunError (p0);
			}
#pragma warning restore 0169

			IntPtr id_onRunError_Ljava_lang_Exception_;
			public unsafe void OnRunError (global::Java.Lang.Exception p0)
			{
				if (id_onRunError_Ljava_lang_Exception_ == IntPtr.Zero)
					id_onRunError_Ljava_lang_Exception_ = JNIEnv.GetMethodID (class_ref, "onRunError", "(Ljava/lang/Exception;)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) p0).Handle);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onRunError_Ljava_lang_Exception_, __args);
			}

		}

		// event args for com.hoho.android.usbserial.util.SerialInputOutputManager.Listener.onNewData
		public partial class NewDataEventArgs : global::System.EventArgs {
			public NewDataEventArgs (byte[] p0)
			{
				this.p0 = p0;
			}

			byte[] p0;

			public byte[] P0 {
				get { return p0; }
			}

		}

		// event args for com.hoho.android.usbserial.util.SerialInputOutputManager.Listener.onRunError
		public partial class RunErrorEventArgs : global::System.EventArgs {
			public RunErrorEventArgs (global::Java.Lang.Exception p0)
			{
				this.p0 = p0;
			}

			global::Java.Lang.Exception p0;

			public global::Java.Lang.Exception P0 {
				get { return p0; }
			}

		}

		[global::Android.Runtime.Register ("mono/com/hoho/android/usbserial/util/SerialInputOutputManager_ListenerImplementor")]
		internal sealed partial class IListenerImplementor : global::Java.Lang.Object, IListener {

			object sender;

			public IListenerImplementor (object sender) : base (global::Android.Runtime.JNIEnv.StartCreateInstance ("mono/com/hoho/android/usbserial/util/SerialInputOutputManager_ListenerImplementor", "()V"), JniHandleOwnership.TransferLocalRef)
			{
				global::Android.Runtime.JNIEnv.FinishCreateInstance (((global::Java.Lang.Object) this).Handle, "()V");
				this.sender = sender;
			}

			#pragma warning disable 0649
			public EventHandler<NewDataEventArgs> OnNewDataHandler;
			#pragma warning restore 0649

			public void OnNewData (byte[] p0)
			{
				var __h = OnNewDataHandler;
				if (__h != null)
					__h (sender, new NewDataEventArgs (p0));
			}

			#pragma warning disable 0649
			public EventHandler<RunErrorEventArgs> OnRunErrorHandler;
			#pragma warning restore 0649

			public void OnRunError (global::Java.Lang.Exception p0)
			{
				var __h = OnRunErrorHandler;
				if (__h != null)
					__h (sender, new RunErrorEventArgs (p0));
			}

			internal static bool __IsEmpty (IListenerImplementor value)
			{
				return value.OnNewDataHandler == null && value.OnRunErrorHandler == null;
			}

		}

		// Metadata.xml XPath class reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager.State']"
		[global::Android.Runtime.Register ("com/hoho/android/usbserial/util/SerialInputOutputManager$State", DoNotGenerateAcw=true)]
		public sealed partial class State : global::Java.Lang.Enum {

			// Metadata.xml XPath field reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager.State']/field[@name='RUNNING']"
			[Register ("RUNNING")]
			public static global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State Running {
				get {
					const string __id = "RUNNING.Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager.State']/field[@name='STOPPED']"
			[Register ("STOPPED")]
			public static global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State Stopped {
				get {
					const string __id = "STOPPED.Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager.State']/field[@name='STOPPING']"
			[Register ("STOPPING")]
			public static global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State Stopping {
				get {
					const string __id = "STOPPING.Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}

			static readonly JniPeerMembers _members = new XAPeerMembers ("com/hoho/android/usbserial/util/SerialInputOutputManager$State", typeof (State));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			internal State (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager.State']/method[@name='valueOf' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("valueOf", "(Ljava/lang/String;)Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;", "")]
			public static unsafe global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State ValueOf (string p0)
			{
				const string __id = "valueOf.(Ljava/lang/String;)Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;";
				IntPtr native_p0 = JNIEnv.NewString ((string)p0);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_p0);
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
					return global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager.State']/method[@name='values' and count(parameter)=0]"
			[Register ("values", "()[Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;", "")]
			public static unsafe global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State[] Values ()
			{
				const string __id = "values.()[Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return (global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State));
				} finally {
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/hoho/android/usbserial/util/SerialInputOutputManager", typeof (SerialInputOutputManager));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SerialInputOutputManager (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/constructor[@name='SerialInputOutputManager' and count(parameter)=1 and parameter[1][@type='com.hoho.android.usbserial.driver.UsbSerialPort']]"
		[Register (".ctor", "(Lcom/hoho/android/usbserial/driver/UsbSerialPort;)V", "")]
		public unsafe SerialInputOutputManager (global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialPort p0) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lcom/hoho/android/usbserial/driver/UsbSerialPort;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/constructor[@name='SerialInputOutputManager' and count(parameter)=2 and parameter[1][@type='com.hoho.android.usbserial.driver.UsbSerialPort'] and parameter[2][@type='com.hoho.android.usbserial.util.SerialInputOutputManager.Listener']]"
		[Register (".ctor", "(Lcom/hoho/android/usbserial/driver/UsbSerialPort;Lcom/hoho/android/usbserial/util/SerialInputOutputManager$Listener;)V", "")]
		public unsafe SerialInputOutputManager (global::Com.Hoho.Android.Usbserial.Driver.IUsbSerialPort p0, global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener p1) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lcom/hoho/android/usbserial/driver/UsbSerialPort;Lcom/hoho/android/usbserial/util/SerialInputOutputManager$Listener;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue ((p1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p1).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
			}
		}

		static Delegate cb_getListener;
#pragma warning disable 0169
		static Delegate GetGetListenerHandler ()
		{
			if (cb_getListener == null)
				cb_getListener = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetListener));
			return cb_getListener;
		}

		static IntPtr n_GetListener (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.Listener);
		}
#pragma warning restore 0169

		static Delegate cb_setListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_;
#pragma warning disable 0169
		static Delegate GetSetListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_Handler ()
		{
			if (cb_setListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_ == null)
				cb_setListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_));
			return cb_setListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_;
		}

		static void n_SetListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener)global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener> (native_p0, JniHandleOwnership.DoNotTransfer);
			__this.Listener = p0;
		}
#pragma warning restore 0169

		public virtual unsafe global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener Listener {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='getListener' and count(parameter)=0]"
			[Register ("getListener", "()Lcom/hoho/android/usbserial/util/SerialInputOutputManager$Listener;", "GetGetListenerHandler")]
			get {
				const string __id = "getListener.()Lcom/hoho/android/usbserial/util/SerialInputOutputManager$Listener;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='setListener' and count(parameter)=1 and parameter[1][@type='com.hoho.android.usbserial.util.SerialInputOutputManager.Listener']]"
			[Register ("setListener", "(Lcom/hoho/android/usbserial/util/SerialInputOutputManager$Listener;)V", "GetSetListener_Lcom_hoho_android_usbserial_util_SerialInputOutputManager_Listener_Handler")]
			set {
				const string __id = "setListener.(Lcom/hoho/android/usbserial/util/SerialInputOutputManager$Listener;)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (value);
				}
			}
		}

		static Delegate cb_getReadTimeout;
#pragma warning disable 0169
		static Delegate GetGetReadTimeoutHandler ()
		{
			if (cb_getReadTimeout == null)
				cb_getReadTimeout = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_GetReadTimeout));
			return cb_getReadTimeout;
		}

		static int n_GetReadTimeout (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return __this.ReadTimeout;
		}
#pragma warning restore 0169

		static Delegate cb_setReadTimeout_I;
#pragma warning disable 0169
		static Delegate GetSetReadTimeout_IHandler ()
		{
			if (cb_setReadTimeout_I == null)
				cb_setReadTimeout_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_SetReadTimeout_I));
			return cb_setReadTimeout_I;
		}

		static void n_SetReadTimeout_I (IntPtr jnienv, IntPtr native__this, int p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.ReadTimeout = p0;
		}
#pragma warning restore 0169

		public virtual unsafe int ReadTimeout {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='getReadTimeout' and count(parameter)=0]"
			[Register ("getReadTimeout", "()I", "GetGetReadTimeoutHandler")]
			get {
				const string __id = "getReadTimeout.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='setReadTimeout' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("setReadTimeout", "(I)V", "GetSetReadTimeout_IHandler")]
			set {
				const string __id = "setReadTimeout.(I)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		static Delegate cb_getWriteTimeout;
#pragma warning disable 0169
		static Delegate GetGetWriteTimeoutHandler ()
		{
			if (cb_getWriteTimeout == null)
				cb_getWriteTimeout = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_GetWriteTimeout));
			return cb_getWriteTimeout;
		}

		static int n_GetWriteTimeout (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return __this.WriteTimeout;
		}
#pragma warning restore 0169

		static Delegate cb_setWriteTimeout_I;
#pragma warning disable 0169
		static Delegate GetSetWriteTimeout_IHandler ()
		{
			if (cb_setWriteTimeout_I == null)
				cb_setWriteTimeout_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_SetWriteTimeout_I));
			return cb_setWriteTimeout_I;
		}

		static void n_SetWriteTimeout_I (IntPtr jnienv, IntPtr native__this, int p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.WriteTimeout = p0;
		}
#pragma warning restore 0169

		public virtual unsafe int WriteTimeout {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='getWriteTimeout' and count(parameter)=0]"
			[Register ("getWriteTimeout", "()I", "GetGetWriteTimeoutHandler")]
			get {
				const string __id = "getWriteTimeout.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='setWriteTimeout' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("setWriteTimeout", "(I)V", "GetSetWriteTimeout_IHandler")]
			set {
				const string __id = "setWriteTimeout.(I)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		static Delegate cb_getState;
#pragma warning disable 0169
		static Delegate GetGetStateHandler ()
		{
			if (cb_getState == null)
				cb_getState = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetState));
			return cb_getState;
		}

		static IntPtr n_GetState (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.GetState ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='getState' and count(parameter)=0]"
		[Register ("getState", "()Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;", "GetGetStateHandler")]
		public virtual unsafe global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State GetState ()
		{
			const string __id = "getState.()Lcom/hoho/android/usbserial/util/SerialInputOutputManager$State;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.State> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate cb_run;
#pragma warning disable 0169
		static Delegate GetRunHandler ()
		{
			if (cb_run == null)
				cb_run = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Run));
			return cb_run;
		}

		static void n_Run (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.Run ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='run' and count(parameter)=0]"
		[Register ("run", "()V", "GetRunHandler")]
		public virtual unsafe void Run ()
		{
			const string __id = "run.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_stop;
#pragma warning disable 0169
		static Delegate GetStopHandler ()
		{
			if (cb_stop == null)
				cb_stop = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Stop));
			return cb_stop;
		}

		static void n_Stop (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.Stop ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='stop' and count(parameter)=0]"
		[Register ("stop", "()V", "GetStopHandler")]
		public virtual unsafe void Stop ()
		{
			const string __id = "stop.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_writeAsync_arrayB;
#pragma warning disable 0169
		static Delegate GetWriteAsync_arrayBHandler ()
		{
			if (cb_writeAsync_arrayB == null)
				cb_writeAsync_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_WriteAsync_arrayB));
			return cb_writeAsync_arrayB;
		}

		static void n_WriteAsync_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (byte[]) JNIEnv.GetArray (native_p0, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.WriteAsync (p0);
			if (p0 != null)
				JNIEnv.CopyArray (p0, native_p0);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.hoho.android.usbserial.util']/class[@name='SerialInputOutputManager']/method[@name='writeAsync' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("writeAsync", "([B)V", "GetWriteAsync_arrayBHandler")]
		public virtual unsafe void WriteAsync (byte[] p0)
		{
			const string __id = "writeAsync.([B)V";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
				global::System.GC.KeepAlive (p0);
			}
		}

		#region "Event implementation for Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListener"

		global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListenerImplementor __CreateIListenerImplementor ()
		{
			return new global::Com.Hoho.Android.Usbserial.Util.SerialInputOutputManager.IListenerImplementor (this);
		}

		#endregion

	}
}
