//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace BR.Com.Daruma.Framework.Mobile.Log {

	// Metadata.xml XPath class reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']"
	[global::Android.Runtime.Register ("br/com/daruma/framework/mobile/log/DarumaLogger", DoNotGenerateAcw=true)]
	public partial class DarumaLogger : global::Java.Lang.Object {
		// Metadata.xml XPath class reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger.LoggerDispatcherTrace']"
		[global::Android.Runtime.Register ("br/com/daruma/framework/mobile/log/DarumaLogger$LoggerDispatcherTrace", DoNotGenerateAcw=true)]
		public sealed partial class LoggerDispatcherTrace : global::Java.Lang.Object, global::Java.Lang.IRunnable {
			static readonly JniPeerMembers _members = new XAPeerMembers ("br/com/daruma/framework/mobile/log/DarumaLogger$LoggerDispatcherTrace", typeof (LoggerDispatcherTrace));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			internal LoggerDispatcherTrace (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger.LoggerDispatcherTrace']/constructor[@name='DarumaLogger.LoggerDispatcherTrace' and count(parameter)=4 and parameter[1][@type='br.com.daruma.framework.mobile.log.DarumaLogger'] and parameter[2][@type='int'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.String']]"
			[Register (".ctor", "(Lbr/com/daruma/framework/mobile/log/DarumaLogger;ILjava/lang/String;Ljava/lang/String;)V", "")]
			public unsafe LoggerDispatcherTrace (global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger __self, int p0, string p1, string p2) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				string __id = "(L" + global::Android.Runtime.JNIEnv.GetJniName (GetType ().DeclaringType) + ";ILjava/lang/String;Ljava/lang/String;)V";

				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;

				IntPtr native_p1 = JNIEnv.NewString ((string)p1);
				IntPtr native_p2 = JNIEnv.NewString ((string)p2);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [4];
					__args [0] = new JniArgumentValue ((__self == null) ? IntPtr.Zero : ((global::Java.Lang.Object) __self).Handle);
					__args [1] = new JniArgumentValue (p0);
					__args [2] = new JniArgumentValue (native_p1);
					__args [3] = new JniArgumentValue (native_p2);
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
					SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
					_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_p1);
					JNIEnv.DeleteLocalRef (native_p2);
					global::System.GC.KeepAlive (__self);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger.LoggerDispatcherTrace']/method[@name='run' and count(parameter)=0]"
			[Register ("run", "()V", "")]
			public unsafe void Run ()
			{
				const string __id = "run.()V";
				try {
					_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
				} finally {
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("br/com/daruma/framework/mobile/log/DarumaLogger", typeof (DarumaLogger));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected DarumaLogger (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public static unsafe global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger Reference {
			// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']/method[@name='getReference' and count(parameter)=0]"
			[Register ("getReference", "()Lbr/com/daruma/framework/mobile/log/DarumaLogger;", "")]
			get {
				const string __id = "getReference.()Lbr/com/daruma/framework/mobile/log/DarumaLogger;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate cb_getTraceListeners;
#pragma warning disable 0169
		static Delegate GetGetTraceListenersHandler ()
		{
			if (cb_getTraceListeners == null)
				cb_getTraceListeners = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetTraceListeners));
			return cb_getTraceListeners;
		}

		static IntPtr n_GetTraceListeners (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return global::Android.Runtime.JavaList<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener>.ToLocalJniHandle (__this.TraceListeners);
		}
#pragma warning restore 0169

		public virtual unsafe global::System.Collections.Generic.IList<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener> TraceListeners {
			// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']/method[@name='getTraceListeners' and count(parameter)=0]"
			[Register ("getTraceListeners", "()Ljava/util/List;", "GetGetTraceListenersHandler")]
			get {
				const string __id = "getTraceListeners.()Ljava/util/List;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Android.Runtime.JavaList<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate cb_addTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_;
#pragma warning disable 0169
		static Delegate GetAddTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_Handler ()
		{
			if (cb_addTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_ == null)
				cb_addTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_AddTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_));
			return cb_addTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_;
		}

		static void n_AddTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener)global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener> (native_p0, JniHandleOwnership.DoNotTransfer);
			__this.AddTraceListener (p0);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']/method[@name='addTraceListener' and count(parameter)=1 and parameter[1][@type='br.com.daruma.framework.mobile.log.listeners.ITraceListener']]"
		[Register ("addTraceListener", "(Lbr/com/daruma/framework/mobile/log/listeners/ITraceListener;)V", "GetAddTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_Handler")]
		public virtual unsafe void AddTraceListener (global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener p0)
		{
			const string __id = "addTraceListener.(Lbr/com/daruma/framework/mobile/log/listeners/ITraceListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_log_ILjava_lang_String_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetLog_ILjava_lang_String_Ljava_lang_String_Handler ()
		{
			if (cb_log_ILjava_lang_String_Ljava_lang_String_ == null)
				cb_log_ILjava_lang_String_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPILL_V (n_Log_ILjava_lang_String_Ljava_lang_String_));
			return cb_log_ILjava_lang_String_Ljava_lang_String_;
		}

		static void n_Log_ILjava_lang_String_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, int p0, IntPtr native_p1, IntPtr native_p2)
		{
			var __this = global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p1 = JNIEnv.GetString (native_p1, JniHandleOwnership.DoNotTransfer);
			var p2 = JNIEnv.GetString (native_p2, JniHandleOwnership.DoNotTransfer);
			__this.Log (p0, p1, p2);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']/method[@name='log' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("log", "(ILjava/lang/String;Ljava/lang/String;)V", "GetLog_ILjava_lang_String_Ljava_lang_String_Handler")]
		public virtual unsafe void Log (int p0, string p1, string p2)
		{
			const string __id = "log.(ILjava/lang/String;Ljava/lang/String;)V";
			IntPtr native_p1 = JNIEnv.NewString ((string)p1);
			IntPtr native_p2 = JNIEnv.NewString ((string)p2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (native_p1);
				__args [2] = new JniArgumentValue (native_p2);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_p1);
				JNIEnv.DeleteLocalRef (native_p2);
			}
		}

		static Delegate cb_removeAllTraceListeners;
#pragma warning disable 0169
		static Delegate GetRemoveAllTraceListenersHandler ()
		{
			if (cb_removeAllTraceListeners == null)
				cb_removeAllTraceListeners = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_RemoveAllTraceListeners));
			return cb_removeAllTraceListeners;
		}

		static void n_RemoveAllTraceListeners (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.RemoveAllTraceListeners ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']/method[@name='removeAllTraceListeners' and count(parameter)=0]"
		[Register ("removeAllTraceListeners", "()V", "GetRemoveAllTraceListenersHandler")]
		public virtual unsafe void RemoveAllTraceListeners ()
		{
			const string __id = "removeAllTraceListeners.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_removeTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_;
#pragma warning disable 0169
		static Delegate GetRemoveTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_Handler ()
		{
			if (cb_removeTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_ == null)
				cb_removeTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_RemoveTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_));
			return cb_removeTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_;
		}

		static bool n_RemoveTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener)global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener> (native_p0, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.RemoveTraceListener (p0);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']/method[@name='removeTraceListener' and count(parameter)=1 and parameter[1][@type='br.com.daruma.framework.mobile.log.listeners.ITraceListener']]"
		[Register ("removeTraceListener", "(Lbr/com/daruma/framework/mobile/log/listeners/ITraceListener;)Z", "GetRemoveTraceListener_Lbr_com_daruma_framework_mobile_log_listeners_ITraceListener_Handler")]
		public virtual unsafe bool RemoveTraceListener (global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener p0)
		{
			const string __id = "removeTraceListener.(Lbr/com/daruma/framework/mobile/log/listeners/ITraceListener;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_setActive_Z;
#pragma warning disable 0169
		static Delegate GetSetActive_ZHandler ()
		{
			if (cb_setActive_Z == null)
				cb_setActive_Z = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPZ_V (n_SetActive_Z));
			return cb_setActive_Z;
		}

		static void n_SetActive_Z (IntPtr jnienv, IntPtr native__this, bool p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.Log.DarumaLogger> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.SetActive (p0);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile.log']/class[@name='DarumaLogger']/method[@name='setActive' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("setActive", "(Z)V", "GetSetActive_ZHandler")]
		public virtual unsafe void SetActive (bool p0)
		{
			const string __id = "setActive.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		#region "Event implementation for BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener"

		public event EventHandler<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.CheckEventArgs> Check {
			add {
				global::Java.Interop.EventHelper.AddEventHandler<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener, global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor>(
				ref weak_implementor_AddTraceListener,
				__CreateITraceListenerImplementor,
				AddTraceListener,
				__h => __h.CheckHandler += value);
			}
			remove {
				global::Java.Interop.EventHelper.RemoveEventHandler<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener, global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor>(
				ref weak_implementor_AddTraceListener,
				global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor.__IsEmpty,
				__v => RemoveTraceListener (__v),
				__h => __h.CheckHandler -= value);
			}
		}

		public event EventHandler<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.TraceOcurredEventArgs> TraceOcurred {
			add {
				global::Java.Interop.EventHelper.AddEventHandler<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener, global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor>(
				ref weak_implementor_AddTraceListener,
				__CreateITraceListenerImplementor,
				AddTraceListener,
				__h => __h.TraceOcurredHandler += value);
			}
			remove {
				global::Java.Interop.EventHelper.RemoveEventHandler<global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListener, global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor>(
				ref weak_implementor_AddTraceListener,
				global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor.__IsEmpty,
				__v => RemoveTraceListener (__v),
				__h => __h.TraceOcurredHandler -= value);
			}
		}

		WeakReference weak_implementor_AddTraceListener;

		global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor __CreateITraceListenerImplementor ()
		{
			return new global::BR.Com.Daruma.Framework.Mobile.Log.Listeners.ITraceListenerImplementor (this);
		}

		#endregion

	}
}
