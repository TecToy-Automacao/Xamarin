//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Orbbec.Astra {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']"
	[global::Android.Runtime.Register ("com/orbbec/astra/DepthStream", DoNotGenerateAcw=true)]
	public sealed partial class DepthStream : global::Com.Orbbec.Astra.ImageStream {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/orbbec/astra/DepthStream", typeof (DepthStream));

		internal static new IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal DepthStream (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/constructor[@name='DepthStream' and count(parameter)=1 and parameter[1][@type='long']]"
		[Register (".ctor", "(J)V", "")]
		public unsafe DepthStream (long p0) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(J)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
			}
		}

		public unsafe int D2CResolution {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='getD2CResolution' and count(parameter)=0]"
			[Register ("getD2CResolution", "()I", "")]
			get {
				const string __id = "getD2CResolution.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='setD2CResolution' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("setD2CResolution", "(I)V", "")]
			set {
				const string __id = "setD2CResolution.(I)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		public unsafe int DeviceChipId {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='getDeviceChipId' and count(parameter)=0]"
			[Register ("getDeviceChipId", "()I", "")]
			get {
				const string __id = "getDeviceChipId.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe string DeviceSerialNumber {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='getDeviceSerialNumber' and count(parameter)=0]"
			[Register ("getDeviceSerialNumber", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getDeviceSerialNumber.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public unsafe bool Registration {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='getRegistration' and count(parameter)=0]"
			[Register ("getRegistration", "()Z", "")]
			get {
				const string __id = "getRegistration.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='setRegistration' and count(parameter)=1 and parameter[1][@type='boolean']]"
			[Register ("setRegistration", "(Z)V", "")]
			set {
				const string __id = "setRegistration.(Z)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		public override unsafe int TypeCode {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='getTypeCode' and count(parameter)=0]"
			[Register ("getTypeCode", "()I", "")]
			get {
				const string __id = "getTypeCode.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='get' and count(parameter)=1 and parameter[1][@type='com.orbbec.astra.StreamReader']]"
		[Register ("get", "(Lcom/orbbec/astra/StreamReader;)Lcom/orbbec/astra/DepthStream;", "")]
		public static unsafe global::Com.Orbbec.Astra.DepthStream Get (global::Com.Orbbec.Astra.StreamReader p0)
		{
			const string __id = "get.(Lcom/orbbec/astra/StreamReader;)Lcom/orbbec/astra/DepthStream;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.DepthStream> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='get' and count(parameter)=2 and parameter[1][@type='com.orbbec.astra.StreamReader'] and parameter[2][@type='int']]"
		[Register ("get", "(Lcom/orbbec/astra/StreamReader;I)Lcom/orbbec/astra/DepthStream;", "")]
		public static unsafe global::Com.Orbbec.Astra.DepthStream Get (global::Com.Orbbec.Astra.StreamReader p0, int p1)
		{
			const string __id = "get.(Lcom/orbbec/astra/StreamReader;I)Lcom/orbbec/astra/DepthStream;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.DepthStream> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='startRecord' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("startRecord", "(Ljava/lang/String;)V", "")]
		public unsafe void StartRecord (string p0)
		{
			const string __id = "startRecord.(Ljava/lang/String;)V";
			IntPtr native_p0 = JNIEnv.NewString ((string)p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra']/class[@name='DepthStream']/method[@name='stopRecord' and count(parameter)=0]"
		[Register ("stopRecord", "()V", "")]
		public unsafe void StopRecord ()
		{
			const string __id = "stopRecord.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
