//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Orbbec.Astra.Android {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']"
	[global::Android.Runtime.Register ("com/orbbec/astra/android/AstraDeviceManager", DoNotGenerateAcw=true)]
	public partial class AstraDeviceManager : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/orbbec/astra/android/AstraDeviceManager", typeof (AstraDeviceManager));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected AstraDeviceManager (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']/constructor[@name='AstraDeviceManager' and count(parameter)=2 and parameter[1][@type='android.content.Context'] and parameter[2][@type='com.orbbec.astra.android.AstraDeviceManagerListener']]"
		[Register (".ctor", "(Landroid/content/Context;Lcom/orbbec/astra/android/AstraDeviceManagerListener;)V", "")]
		public unsafe AstraDeviceManager (global::Android.Content.Context p0, global::Com.Orbbec.Astra.Android.IAstraDeviceManagerListener p1) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Landroid/content/Context;Lcom/orbbec/astra/android/AstraDeviceManagerListener;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue ((p1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p1).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
			}
		}

		static Delegate cb_getAvailableDevices;
#pragma warning disable 0169
		static Delegate GetGetAvailableDevicesHandler ()
		{
			if (cb_getAvailableDevices == null)
				cb_getAvailableDevices = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetAvailableDevices));
			return cb_getAvailableDevices;
		}

		static IntPtr n_GetAvailableDevices (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.AstraDeviceManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.AvailableDevices);
		}
#pragma warning restore 0169

		public virtual unsafe global::Java.Lang.IIterable AvailableDevices {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']/method[@name='getAvailableDevices' and count(parameter)=0]"
			[Register ("getAvailableDevices", "()Ljava/lang/Iterable;", "GetGetAvailableDevicesHandler")]
			get {
				const string __id = "getAvailableDevices.()Ljava/lang/Iterable;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Java.Lang.IIterable> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate cb_getAvailableDevicesSize;
#pragma warning disable 0169
		static Delegate GetGetAvailableDevicesSizeHandler ()
		{
			if (cb_getAvailableDevicesSize == null)
				cb_getAvailableDevicesSize = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_GetAvailableDevicesSize));
			return cb_getAvailableDevicesSize;
		}

		static int n_GetAvailableDevicesSize (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.AstraDeviceManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return __this.AvailableDevicesSize;
		}
#pragma warning restore 0169

		public virtual unsafe int AvailableDevicesSize {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']/method[@name='getAvailableDevicesSize' and count(parameter)=0]"
			[Register ("getAvailableDevicesSize", "()I", "GetGetAvailableDevicesSizeHandler")]
			get {
				const string __id = "getAvailableDevicesSize.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate cb_closeAllDevices;
#pragma warning disable 0169
		static Delegate GetCloseAllDevicesHandler ()
		{
			if (cb_closeAllDevices == null)
				cb_closeAllDevices = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_CloseAllDevices));
			return cb_closeAllDevices;
		}

		static void n_CloseAllDevices (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.AstraDeviceManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.CloseAllDevices ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']/method[@name='closeAllDevices' and count(parameter)=0]"
		[Register ("closeAllDevices", "()V", "GetCloseAllDevicesHandler")]
		public virtual unsafe void CloseAllDevices ()
		{
			const string __id = "closeAllDevices.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_openAllDevices;
#pragma warning disable 0169
		static Delegate GetOpenAllDevicesHandler ()
		{
			if (cb_openAllDevices == null)
				cb_openAllDevices = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_OpenAllDevices));
			return cb_openAllDevices;
		}

		static void n_OpenAllDevices (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.AstraDeviceManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.OpenAllDevices ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']/method[@name='openAllDevices' and count(parameter)=0]"
		[Register ("openAllDevices", "()V", "GetOpenAllDevicesHandler")]
		public virtual unsafe void OpenAllDevices ()
		{
			const string __id = "openAllDevices.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_release;
#pragma warning disable 0169
		static Delegate GetReleaseHandler ()
		{
			if (cb_release == null)
				cb_release = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Release));
			return cb_release;
		}

		static void n_Release (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.AstraDeviceManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.Release ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']/method[@name='release' and count(parameter)=0]"
		[Register ("release", "()V", "GetReleaseHandler")]
		public virtual unsafe void Release ()
		{
			const string __id = "release.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate cb_tryOpenDevice_Landroid_hardware_usb_UsbDevice_;
#pragma warning disable 0169
		static Delegate GetTryOpenDevice_Landroid_hardware_usb_UsbDevice_Handler ()
		{
			if (cb_tryOpenDevice_Landroid_hardware_usb_UsbDevice_ == null)
				cb_tryOpenDevice_Landroid_hardware_usb_UsbDevice_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_TryOpenDevice_Landroid_hardware_usb_UsbDevice_));
			return cb_tryOpenDevice_Landroid_hardware_usb_UsbDevice_;
		}

		static void n_TryOpenDevice_Landroid_hardware_usb_UsbDevice_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.AstraDeviceManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (native_p0, JniHandleOwnership.DoNotTransfer);
			__this.TryOpenDevice (p0);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='AstraDeviceManager']/method[@name='tryOpenDevice' and count(parameter)=1 and parameter[1][@type='android.hardware.usb.UsbDevice']]"
		[Register ("tryOpenDevice", "(Landroid/hardware/usb/UsbDevice;)V", "GetTryOpenDevice_Landroid_hardware_usb_UsbDevice_Handler")]
		public virtual unsafe void TryOpenDevice (global::Android.Hardware.Usb.UsbDevice p0)
		{
			const string __id = "tryOpenDevice.(Landroid/hardware/usb/UsbDevice;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

	}
}
