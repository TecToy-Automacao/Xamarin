//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace BR.Com.Daruma.Framework.Mobile {

	// Metadata.xml XPath class reference: path="/api/package[@name='br.com.daruma.framework.mobile']/class[@name='ThreadPoolManager']"
	[global::Android.Runtime.Register ("br/com/daruma/framework/mobile/ThreadPoolManager", DoNotGenerateAcw=true)]
	public partial class ThreadPoolManager : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("br/com/daruma/framework/mobile/ThreadPoolManager", typeof (ThreadPoolManager));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ThreadPoolManager (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public static unsafe global::BR.Com.Daruma.Framework.Mobile.ThreadPoolManager Instance {
			// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile']/class[@name='ThreadPoolManager']/method[@name='getInstance' and count(parameter)=0]"
			[Register ("getInstance", "()Lbr/com/daruma/framework/mobile/ThreadPoolManager;", "")]
			get {
				const string __id = "getInstance.()Lbr/com/daruma/framework/mobile/ThreadPoolManager;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.ThreadPoolManager> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate cb_executeTask_Ljava_lang_Runnable_;
#pragma warning disable 0169
		static Delegate GetExecuteTask_Ljava_lang_Runnable_Handler ()
		{
			if (cb_executeTask_Ljava_lang_Runnable_ == null)
				cb_executeTask_Ljava_lang_Runnable_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_ExecuteTask_Ljava_lang_Runnable_));
			return cb_executeTask_Ljava_lang_Runnable_;
		}

		static void n_ExecuteTask_Ljava_lang_Runnable_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
		{
			var __this = global::Java.Lang.Object.GetObject<global::BR.Com.Daruma.Framework.Mobile.ThreadPoolManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = (global::Java.Lang.IRunnable)global::Java.Lang.Object.GetObject<global::Java.Lang.IRunnable> (native_p0, JniHandleOwnership.DoNotTransfer);
			__this.ExecuteTask (p0);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='br.com.daruma.framework.mobile']/class[@name='ThreadPoolManager']/method[@name='executeTask' and count(parameter)=1 and parameter[1][@type='java.lang.Runnable']]"
		[Register ("executeTask", "(Ljava/lang/Runnable;)V", "GetExecuteTask_Ljava_lang_Runnable_Handler")]
		public virtual unsafe void ExecuteTask (global::Java.Lang.IRunnable p0)
		{
			const string __id = "executeTask.(Ljava/lang/Runnable;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

	}
}
