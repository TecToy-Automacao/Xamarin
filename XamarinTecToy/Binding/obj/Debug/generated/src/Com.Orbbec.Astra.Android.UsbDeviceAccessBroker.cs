//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Orbbec.Astra.Android {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='UsbDeviceAccessBroker']"
	[global::Android.Runtime.Register ("com/orbbec/astra/android/UsbDeviceAccessBroker", DoNotGenerateAcw=true)]
	public partial class UsbDeviceAccessBroker : global::Java.Lang.Object {
		// Metadata.xml XPath interface reference: path="/api/package[@name='com.orbbec.astra.android']/interface[@name='UsbDeviceAccessBroker.UsbDeviceAccessEventListener']"
		[Register ("com/orbbec/astra/android/UsbDeviceAccessBroker$UsbDeviceAccessEventListener", "", "Com.Orbbec.Astra.Android.UsbDeviceAccessBroker/IUsbDeviceAccessEventListenerInvoker")]
		public partial interface IUsbDeviceAccessEventListener : IJavaObject, IJavaPeerable {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/interface[@name='UsbDeviceAccessBroker.UsbDeviceAccessEventListener']/method[@name='onDeviceOpenFailed' and count(parameter)=1 and parameter[1][@type='android.hardware.usb.UsbDevice']]"
			[Register ("onDeviceOpenFailed", "(Landroid/hardware/usb/UsbDevice;)V", "GetOnDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_Handler:Com.Orbbec.Astra.Android.UsbDeviceAccessBroker/IUsbDeviceAccessEventListenerInvoker, Binding")]
			void OnDeviceOpenFailed (global::Android.Hardware.Usb.UsbDevice p0);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/interface[@name='UsbDeviceAccessBroker.UsbDeviceAccessEventListener']/method[@name='onDeviceOpened' and count(parameter)=2 and parameter[1][@type='android.hardware.usb.UsbDevice'] and parameter[2][@type='android.hardware.usb.UsbDeviceConnection']]"
			[Register ("onDeviceOpened", "(Landroid/hardware/usb/UsbDevice;Landroid/hardware/usb/UsbDeviceConnection;)V", "GetOnDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_Handler:Com.Orbbec.Astra.Android.UsbDeviceAccessBroker/IUsbDeviceAccessEventListenerInvoker, Binding")]
			void OnDeviceOpened (global::Android.Hardware.Usb.UsbDevice p0, global::Android.Hardware.Usb.UsbDeviceConnection p1);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/interface[@name='UsbDeviceAccessBroker.UsbDeviceAccessEventListener']/method[@name='onPermissionDenied' and count(parameter)=1 and parameter[1][@type='android.hardware.usb.UsbDevice']]"
			[Register ("onPermissionDenied", "(Landroid/hardware/usb/UsbDevice;)V", "GetOnPermissionDenied_Landroid_hardware_usb_UsbDevice_Handler:Com.Orbbec.Astra.Android.UsbDeviceAccessBroker/IUsbDeviceAccessEventListenerInvoker, Binding")]
			void OnPermissionDenied (global::Android.Hardware.Usb.UsbDevice p0);

		}

		[global::Android.Runtime.Register ("com/orbbec/astra/android/UsbDeviceAccessBroker$UsbDeviceAccessEventListener", DoNotGenerateAcw=true)]
		internal partial class IUsbDeviceAccessEventListenerInvoker : global::Java.Lang.Object, IUsbDeviceAccessEventListener {
			static readonly JniPeerMembers _members = new XAPeerMembers ("com/orbbec/astra/android/UsbDeviceAccessBroker$UsbDeviceAccessEventListener", typeof (IUsbDeviceAccessEventListenerInvoker));

			static IntPtr java_class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return class_ref; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			IntPtr class_ref;

			public static IUsbDeviceAccessEventListener GetObject (IntPtr handle, JniHandleOwnership transfer)
			{
				return global::Java.Lang.Object.GetObject<IUsbDeviceAccessEventListener> (handle, transfer);
			}

			static IntPtr Validate (IntPtr handle)
			{
				if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
					throw new InvalidCastException ($"Unable to convert instance of type '{JNIEnv.GetClassNameFromInstance (handle)}' to type 'com.orbbec.astra.android.UsbDeviceAccessBroker.UsbDeviceAccessEventListener'.");
				return handle;
			}

			protected override void Dispose (bool disposing)
			{
				if (this.class_ref != IntPtr.Zero)
					JNIEnv.DeleteGlobalRef (this.class_ref);
				this.class_ref = IntPtr.Zero;
				base.Dispose (disposing);
			}

			public IUsbDeviceAccessEventListenerInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
			{
				IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
				this.class_ref = JNIEnv.NewGlobalRef (local_ref);
				JNIEnv.DeleteLocalRef (local_ref);
			}

			static Delegate cb_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_;
#pragma warning disable 0169
			static Delegate GetOnDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_Handler ()
			{
				if (cb_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_ == null)
					cb_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_OnDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_));
				return cb_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_;
			}

			static void n_OnDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker.IUsbDeviceAccessEventListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (native_p0, JniHandleOwnership.DoNotTransfer);
				__this.OnDeviceOpenFailed (p0);
			}
#pragma warning restore 0169

			IntPtr id_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_;
			public unsafe void OnDeviceOpenFailed (global::Android.Hardware.Usb.UsbDevice p0)
			{
				if (id_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_ == IntPtr.Zero)
					id_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_ = JNIEnv.GetMethodID (class_ref, "onDeviceOpenFailed", "(Landroid/hardware/usb/UsbDevice;)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onDeviceOpenFailed_Landroid_hardware_usb_UsbDevice_, __args);
			}

			static Delegate cb_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_;
#pragma warning disable 0169
			static Delegate GetOnDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_Handler ()
			{
				if (cb_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_ == null)
					cb_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_V (n_OnDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_));
				return cb_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_;
			}

			static void n_OnDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, IntPtr native_p1)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker.IUsbDeviceAccessEventListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (native_p0, JniHandleOwnership.DoNotTransfer);
				var p1 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDeviceConnection> (native_p1, JniHandleOwnership.DoNotTransfer);
				__this.OnDeviceOpened (p0, p1);
			}
#pragma warning restore 0169

			IntPtr id_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_;
			public unsafe void OnDeviceOpened (global::Android.Hardware.Usb.UsbDevice p0, global::Android.Hardware.Usb.UsbDeviceConnection p1)
			{
				if (id_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_ == IntPtr.Zero)
					id_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_ = JNIEnv.GetMethodID (class_ref, "onDeviceOpened", "(Landroid/hardware/usb/UsbDevice;Landroid/hardware/usb/UsbDeviceConnection;)V");
				JValue* __args = stackalloc JValue [2];
				__args [0] = new JValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JValue ((p1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p1).Handle);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onDeviceOpened_Landroid_hardware_usb_UsbDevice_Landroid_hardware_usb_UsbDeviceConnection_, __args);
			}

			static Delegate cb_onPermissionDenied_Landroid_hardware_usb_UsbDevice_;
#pragma warning disable 0169
			static Delegate GetOnPermissionDenied_Landroid_hardware_usb_UsbDevice_Handler ()
			{
				if (cb_onPermissionDenied_Landroid_hardware_usb_UsbDevice_ == null)
					cb_onPermissionDenied_Landroid_hardware_usb_UsbDevice_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_OnPermissionDenied_Landroid_hardware_usb_UsbDevice_));
				return cb_onPermissionDenied_Landroid_hardware_usb_UsbDevice_;
			}

			static void n_OnPermissionDenied_Landroid_hardware_usb_UsbDevice_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker.IUsbDeviceAccessEventListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (native_p0, JniHandleOwnership.DoNotTransfer);
				__this.OnPermissionDenied (p0);
			}
#pragma warning restore 0169

			IntPtr id_onPermissionDenied_Landroid_hardware_usb_UsbDevice_;
			public unsafe void OnPermissionDenied (global::Android.Hardware.Usb.UsbDevice p0)
			{
				if (id_onPermissionDenied_Landroid_hardware_usb_UsbDevice_ == IntPtr.Zero)
					id_onPermissionDenied_Landroid_hardware_usb_UsbDevice_ = JNIEnv.GetMethodID (class_ref, "onPermissionDenied", "(Landroid/hardware/usb/UsbDevice;)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onPermissionDenied_Landroid_hardware_usb_UsbDevice_, __args);
			}

		}

		// event args for com.orbbec.astra.android.UsbDeviceAccessBroker.UsbDeviceAccessEventListener.onDeviceOpenFailed
		public partial class DeviceOpenFailedEventArgs : global::System.EventArgs {
			public DeviceOpenFailedEventArgs (global::Android.Hardware.Usb.UsbDevice p0)
			{
				this.p0 = p0;
			}

			global::Android.Hardware.Usb.UsbDevice p0;

			public global::Android.Hardware.Usb.UsbDevice P0 {
				get { return p0; }
			}

		}

		// event args for com.orbbec.astra.android.UsbDeviceAccessBroker.UsbDeviceAccessEventListener.onDeviceOpened
		public partial class DeviceOpenedEventArgs : global::System.EventArgs {
			public DeviceOpenedEventArgs (global::Android.Hardware.Usb.UsbDevice p0, global::Android.Hardware.Usb.UsbDeviceConnection p1)
			{
				this.p0 = p0;
				this.p1 = p1;
			}

			global::Android.Hardware.Usb.UsbDevice p0;

			public global::Android.Hardware.Usb.UsbDevice P0 {
				get { return p0; }
			}

			global::Android.Hardware.Usb.UsbDeviceConnection p1;

			public global::Android.Hardware.Usb.UsbDeviceConnection P1 {
				get { return p1; }
			}

		}

		// event args for com.orbbec.astra.android.UsbDeviceAccessBroker.UsbDeviceAccessEventListener.onPermissionDenied
		public partial class PermissionDeniedEventArgs : global::System.EventArgs {
			public PermissionDeniedEventArgs (global::Android.Hardware.Usb.UsbDevice p0)
			{
				this.p0 = p0;
			}

			global::Android.Hardware.Usb.UsbDevice p0;

			public global::Android.Hardware.Usb.UsbDevice P0 {
				get { return p0; }
			}

		}

		[global::Android.Runtime.Register ("mono/com/orbbec/astra/android/UsbDeviceAccessBroker_UsbDeviceAccessEventListenerImplementor")]
		internal sealed partial class IUsbDeviceAccessEventListenerImplementor : global::Java.Lang.Object, IUsbDeviceAccessEventListener {

			object sender;

			public IUsbDeviceAccessEventListenerImplementor (object sender) : base (global::Android.Runtime.JNIEnv.StartCreateInstance ("mono/com/orbbec/astra/android/UsbDeviceAccessBroker_UsbDeviceAccessEventListenerImplementor", "()V"), JniHandleOwnership.TransferLocalRef)
			{
				global::Android.Runtime.JNIEnv.FinishCreateInstance (((global::Java.Lang.Object) this).Handle, "()V");
				this.sender = sender;
			}

			#pragma warning disable 0649
			public EventHandler<DeviceOpenFailedEventArgs> OnDeviceOpenFailedHandler;
			#pragma warning restore 0649

			public void OnDeviceOpenFailed (global::Android.Hardware.Usb.UsbDevice p0)
			{
				var __h = OnDeviceOpenFailedHandler;
				if (__h != null)
					__h (sender, new DeviceOpenFailedEventArgs (p0));
			}

			#pragma warning disable 0649
			public EventHandler<DeviceOpenedEventArgs> OnDeviceOpenedHandler;
			#pragma warning restore 0649

			public void OnDeviceOpened (global::Android.Hardware.Usb.UsbDevice p0, global::Android.Hardware.Usb.UsbDeviceConnection p1)
			{
				var __h = OnDeviceOpenedHandler;
				if (__h != null)
					__h (sender, new DeviceOpenedEventArgs (p0, p1));
			}

			#pragma warning disable 0649
			public EventHandler<PermissionDeniedEventArgs> OnPermissionDeniedHandler;
			#pragma warning restore 0649

			public void OnPermissionDenied (global::Android.Hardware.Usb.UsbDevice p0)
			{
				var __h = OnPermissionDeniedHandler;
				if (__h != null)
					__h (sender, new PermissionDeniedEventArgs (p0));
			}

			internal static bool __IsEmpty (IUsbDeviceAccessEventListenerImplementor value)
			{
				return value.OnDeviceOpenFailedHandler == null && value.OnDeviceOpenedHandler == null && value.OnPermissionDeniedHandler == null;
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/orbbec/astra/android/UsbDeviceAccessBroker", typeof (UsbDeviceAccessBroker));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected UsbDeviceAccessBroker (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='UsbDeviceAccessBroker']/constructor[@name='UsbDeviceAccessBroker' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register (".ctor", "(Landroid/content/Context;)V", "")]
		public unsafe UsbDeviceAccessBroker (global::Android.Content.Context p0) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Landroid/content/Context;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_open_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_;
#pragma warning disable 0169
		static Delegate GetOpen_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_Handler ()
		{
			if (cb_open_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_ == null)
				cb_open_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_V (n_Open_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_));
			return cb_open_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_;
		}

		static void n_Open_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, IntPtr native_p1)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var p0 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (native_p0, JniHandleOwnership.DoNotTransfer);
			var p1 = (global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker.IUsbDeviceAccessEventListener)global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker.IUsbDeviceAccessEventListener> (native_p1, JniHandleOwnership.DoNotTransfer);
			__this.Open (p0, p1);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='UsbDeviceAccessBroker']/method[@name='open' and count(parameter)=2 and parameter[1][@type='android.hardware.usb.UsbDevice'] and parameter[2][@type='com.orbbec.astra.android.UsbDeviceAccessBroker.UsbDeviceAccessEventListener']]"
		[Register ("open", "(Landroid/hardware/usb/UsbDevice;Lcom/orbbec/astra/android/UsbDeviceAccessBroker$UsbDeviceAccessEventListener;)V", "GetOpen_Landroid_hardware_usb_UsbDevice_Lcom_orbbec_astra_android_UsbDeviceAccessBroker_UsbDeviceAccessEventListener_Handler")]
		public virtual unsafe void Open (global::Android.Hardware.Usb.UsbDevice p0, global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker.IUsbDeviceAccessEventListener p1)
		{
			const string __id = "open.(Landroid/hardware/usb/UsbDevice;Lcom/orbbec/astra/android/UsbDeviceAccessBroker$UsbDeviceAccessEventListener;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				__args [1] = new JniArgumentValue ((p1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p1).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
			}
		}

		static Delegate cb_release;
#pragma warning disable 0169
		static Delegate GetReleaseHandler ()
		{
			if (cb_release == null)
				cb_release = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Release));
			return cb_release;
		}

		static void n_Release (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Orbbec.Astra.Android.UsbDeviceAccessBroker> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.Release ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.orbbec.astra.android']/class[@name='UsbDeviceAccessBroker']/method[@name='release' and count(parameter)=0]"
		[Register ("release", "()V", "GetReleaseHandler")]
		public virtual unsafe void Release ()
		{
			const string __id = "release.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
