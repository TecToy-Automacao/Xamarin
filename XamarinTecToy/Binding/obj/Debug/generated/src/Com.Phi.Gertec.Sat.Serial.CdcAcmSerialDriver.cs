//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Phi.Gertec.Sat.Serial {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver']"
	[global::Android.Runtime.Register ("com/phi/gertec/sat/serial/CdcAcmSerialDriver", DoNotGenerateAcw=true)]
	public partial class CdcAcmSerialDriver : global::Java.Lang.Object, global::Com.Phi.Gertec.Sat.Serial.IUsbSerialDriver {
		// Metadata.xml XPath class reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']"
		[global::Android.Runtime.Register ("com/phi/gertec/sat/serial/CdcAcmSerialDriver$CdcAcmSerialPort", DoNotGenerateAcw=true)]
		public partial class CdcAcmSerialPort : global::Com.Phi.Gertec.Sat.Serial.CommonUsbSerialPort {
			// Metadata.xml XPath field reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/field[@name='GET_LINE_CODING']"
			[Register ("GET_LINE_CODING")]
			public const int GetLineCoding = (int) 33;

			// Metadata.xml XPath field reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/field[@name='SEND_BREAK']"
			[Register ("SEND_BREAK")]
			public const int SendBreak = (int) 35;

			// Metadata.xml XPath field reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/field[@name='SET_CONTROL_LINE_STATE']"
			[Register ("SET_CONTROL_LINE_STATE")]
			public const int SetControlLineState = (int) 34;

			// Metadata.xml XPath field reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/field[@name='SET_LINE_CODING']"
			[Register ("SET_LINE_CODING")]
			public const int SetLineCoding = (int) 32;

			// Metadata.xml XPath field reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/field[@name='USB_RECIP_INTERFACE']"
			[Register ("USB_RECIP_INTERFACE")]
			public const int UsbRecipInterface = (int) 1;

			// Metadata.xml XPath field reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/field[@name='USB_RT_ACM']"
			[Register ("USB_RT_ACM")]
			public const int UsbRtAcm = (int) 33;

			static readonly JniPeerMembers _members = new XAPeerMembers ("com/phi/gertec/sat/serial/CdcAcmSerialDriver$CdcAcmSerialPort", typeof (CdcAcmSerialPort));

			internal static new IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			protected CdcAcmSerialPort (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/constructor[@name='CdcAcmSerialDriver.CdcAcmSerialPort' and count(parameter)=3 and parameter[1][@type='com.phi.gertec.sat.serial.CdcAcmSerialDriver'] and parameter[2][@type='android.hardware.usb.UsbDevice'] and parameter[3][@type='int']]"
			[Register (".ctor", "(Lcom/phi/gertec/sat/serial/CdcAcmSerialDriver;Landroid/hardware/usb/UsbDevice;I)V", "")]
			public unsafe CdcAcmSerialPort (global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver __self, global::Android.Hardware.Usb.UsbDevice p0, int p1) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				string __id = "(L" + global::Android.Runtime.JNIEnv.GetJniName (GetType ().DeclaringType) + ";Landroid/hardware/usb/UsbDevice;I)V";

				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;

				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [3];
					__args [0] = new JniArgumentValue ((__self == null) ? IntPtr.Zero : ((global::Java.Lang.Object) __self).Handle);
					__args [1] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
					__args [2] = new JniArgumentValue (p1);
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
					SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
					_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (__self);
					global::System.GC.KeepAlive (p0);
				}
			}

			static Delegate cb_getCD;
#pragma warning disable 0169
			static Delegate GetGetCDHandler ()
			{
				if (cb_getCD == null)
					cb_getCD = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_GetCD));
				return cb_getCD;
			}

			static bool n_GetCD (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.CD;
			}
#pragma warning restore 0169

			public override unsafe bool CD {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='getCD' and count(parameter)=0]"
				[Register ("getCD", "()Z", "GetGetCDHandler")]
				get {
					const string __id = "getCD.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
			}

			static Delegate cb_getCTS;
#pragma warning disable 0169
			static Delegate GetGetCTSHandler ()
			{
				if (cb_getCTS == null)
					cb_getCTS = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_GetCTS));
				return cb_getCTS;
			}

			static bool n_GetCTS (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.CTS;
			}
#pragma warning restore 0169

			public override unsafe bool CTS {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='getCTS' and count(parameter)=0]"
				[Register ("getCTS", "()Z", "GetGetCTSHandler")]
				get {
					const string __id = "getCTS.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
			}

			static Delegate cb_getDSR;
#pragma warning disable 0169
			static Delegate GetGetDSRHandler ()
			{
				if (cb_getDSR == null)
					cb_getDSR = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_GetDSR));
				return cb_getDSR;
			}

			static bool n_GetDSR (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.DSR;
			}
#pragma warning restore 0169

			public override unsafe bool DSR {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='getDSR' and count(parameter)=0]"
				[Register ("getDSR", "()Z", "GetGetDSRHandler")]
				get {
					const string __id = "getDSR.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
			}

			static Delegate cb_getDTR;
#pragma warning disable 0169
			static Delegate GetGetDTRHandler ()
			{
				if (cb_getDTR == null)
					cb_getDTR = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_GetDTR));
				return cb_getDTR;
			}

			static bool n_GetDTR (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.DTR;
			}
#pragma warning restore 0169

			static Delegate cb_setDTR_Z;
#pragma warning disable 0169
			static Delegate GetSetDTR_ZHandler ()
			{
				if (cb_setDTR_Z == null)
					cb_setDTR_Z = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPZ_V (n_SetDTR_Z));
				return cb_setDTR_Z;
			}

			static void n_SetDTR_Z (IntPtr jnienv, IntPtr native__this, bool p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.DTR = p0;
			}
#pragma warning restore 0169

			public override unsafe bool DTR {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='getDTR' and count(parameter)=0]"
				[Register ("getDTR", "()Z", "GetGetDTRHandler")]
				get {
					const string __id = "getDTR.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='setDTR' and count(parameter)=1 and parameter[1][@type='boolean']]"
				[Register ("setDTR", "(Z)V", "GetSetDTR_ZHandler")]
				set {
					const string __id = "setDTR.(Z)V";
					try {
						JniArgumentValue* __args = stackalloc JniArgumentValue [1];
						__args [0] = new JniArgumentValue (value);
						_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
					} finally {
					}
				}
			}

			static Delegate cb_getDriver;
#pragma warning disable 0169
			static Delegate GetGetDriverHandler ()
			{
				if (cb_getDriver == null)
					cb_getDriver = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetDriver));
				return cb_getDriver;
			}

			static IntPtr n_GetDriver (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return JNIEnv.ToLocalJniHandle (__this.Driver);
			}
#pragma warning restore 0169

			public override unsafe global::Com.Phi.Gertec.Sat.Serial.IUsbSerialDriver Driver {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='getDriver' and count(parameter)=0]"
				[Register ("getDriver", "()Lcom/phi/gertec/sat/serial/UsbSerialDriver;", "GetGetDriverHandler")]
				get {
					const string __id = "getDriver.()Lcom/phi/gertec/sat/serial/UsbSerialDriver;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.IUsbSerialDriver> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

			static Delegate cb_getRI;
#pragma warning disable 0169
			static Delegate GetGetRIHandler ()
			{
				if (cb_getRI == null)
					cb_getRI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_GetRI));
				return cb_getRI;
			}

			static bool n_GetRI (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.RI;
			}
#pragma warning restore 0169

			public override unsafe bool RI {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='getRI' and count(parameter)=0]"
				[Register ("getRI", "()Z", "GetGetRIHandler")]
				get {
					const string __id = "getRI.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
			}

			static Delegate cb_getRTS;
#pragma warning disable 0169
			static Delegate GetGetRTSHandler ()
			{
				if (cb_getRTS == null)
					cb_getRTS = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_GetRTS));
				return cb_getRTS;
			}

			static bool n_GetRTS (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.RTS;
			}
#pragma warning restore 0169

			static Delegate cb_setRTS_Z;
#pragma warning disable 0169
			static Delegate GetSetRTS_ZHandler ()
			{
				if (cb_setRTS_Z == null)
					cb_setRTS_Z = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPZ_V (n_SetRTS_Z));
				return cb_setRTS_Z;
			}

			static void n_SetRTS_Z (IntPtr jnienv, IntPtr native__this, bool p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.RTS = p0;
			}
#pragma warning restore 0169

			public override unsafe bool RTS {
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='getRTS' and count(parameter)=0]"
				[Register ("getRTS", "()Z", "GetGetRTSHandler")]
				get {
					const string __id = "getRTS.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
				// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='setRTS' and count(parameter)=1 and parameter[1][@type='boolean']]"
				[Register ("setRTS", "(Z)V", "GetSetRTS_ZHandler")]
				set {
					const string __id = "setRTS.(Z)V";
					try {
						JniArgumentValue* __args = stackalloc JniArgumentValue [1];
						__args [0] = new JniArgumentValue (value);
						_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
					} finally {
					}
				}
			}

			static Delegate cb_close;
#pragma warning disable 0169
			static Delegate GetCloseHandler ()
			{
				if (cb_close == null)
					cb_close = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Close));
				return cb_close;
			}

			static void n_Close (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.Close ();
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='close' and count(parameter)=0]"
			[Register ("close", "()V", "GetCloseHandler")]
			public override unsafe void Close ()
			{
				const string __id = "close.()V";
				try {
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
				} finally {
				}
			}

			static Delegate cb_open_Landroid_hardware_usb_UsbDeviceConnection_;
#pragma warning disable 0169
			static Delegate GetOpen_Landroid_hardware_usb_UsbDeviceConnection_Handler ()
			{
				if (cb_open_Landroid_hardware_usb_UsbDeviceConnection_ == null)
					cb_open_Landroid_hardware_usb_UsbDeviceConnection_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_Open_Landroid_hardware_usb_UsbDeviceConnection_));
				return cb_open_Landroid_hardware_usb_UsbDeviceConnection_;
			}

			static void n_Open_Landroid_hardware_usb_UsbDeviceConnection_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDeviceConnection> (native_p0, JniHandleOwnership.DoNotTransfer);
				__this.Open (p0);
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='open' and count(parameter)=1 and parameter[1][@type='android.hardware.usb.UsbDeviceConnection']]"
			[Register ("open", "(Landroid/hardware/usb/UsbDeviceConnection;)V", "GetOpen_Landroid_hardware_usb_UsbDeviceConnection_Handler")]
			public override unsafe void Open (global::Android.Hardware.Usb.UsbDeviceConnection p0)
			{
				const string __id = "open.(Landroid/hardware/usb/UsbDeviceConnection;)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (p0);
				}
			}

			static Delegate cb_read_arrayBI;
#pragma warning disable 0169
			static Delegate GetRead_arrayBIHandler ()
			{
				if (cb_read_arrayBI == null)
					cb_read_arrayBI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_I (n_Read_arrayBI));
				return cb_read_arrayBI;
			}

			static int n_Read_arrayBI (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, int p1)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = (byte[]) JNIEnv.GetArray (native_p0, JniHandleOwnership.DoNotTransfer, typeof (byte));
				int __ret = __this.Read (p0, p1);
				if (p0 != null)
					JNIEnv.CopyArray (p0, native_p0);
				return __ret;
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='read' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
			[Register ("read", "([BI)I", "GetRead_arrayBIHandler")]
			public override unsafe int Read (byte[] p0, int p1)
			{
				const string __id = "read.([BI)I";
				IntPtr native_p0 = JNIEnv.NewArray (p0);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_p0);
					__args [1] = new JniArgumentValue (p1);
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
					return __rm;
				} finally {
					if (p0 != null) {
						JNIEnv.CopyArray (native_p0, p0);
						JNIEnv.DeleteLocalRef (native_p0);
					}
					global::System.GC.KeepAlive (p0);
				}
			}

			static Delegate cb_reada_I;
#pragma warning disable 0169
			static Delegate GetReada_IHandler ()
			{
				if (cb_reada_I == null)
					cb_reada_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_I (n_Reada_I));
				return cb_reada_I;
			}

			static int n_Reada_I (IntPtr jnienv, IntPtr native__this, int p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.Reada (p0);
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='reada' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("reada", "(I)I", "GetReada_IHandler")]
			public override unsafe int Reada (int p0)
			{
				const string __id = "reada.(I)I";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (p0);
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
					return __rm;
				} finally {
				}
			}

			static Delegate cb_reada_II;
#pragma warning disable 0169
			static Delegate GetReada_IIHandler ()
			{
				if (cb_reada_II == null)
					cb_reada_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_I (n_Reada_II));
				return cb_reada_II;
			}

			static int n_Reada_II (IntPtr jnienv, IntPtr native__this, int p0, int p1)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				return __this.Reada (p0, p1);
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='reada' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
			[Register ("reada", "(II)I", "GetReada_IIHandler")]
			public override unsafe int Reada (int p0, int p1)
			{
				const string __id = "reada.(II)I";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (p0);
					__args [1] = new JniArgumentValue (p1);
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
					return __rm;
				} finally {
				}
			}

			static Delegate cb_setParameters_IIII;
#pragma warning disable 0169
			static Delegate GetSetParameters_IIIIHandler ()
			{
				if (cb_setParameters_IIII == null)
					cb_setParameters_IIII = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIIII_V (n_SetParameters_IIII));
				return cb_setParameters_IIII;
			}

			static void n_SetParameters_IIII (IntPtr jnienv, IntPtr native__this, int p0, int p1, int p2, int p3)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.SetParameters (p0, p1, p2, p3);
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='setParameters' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
			[Register ("setParameters", "(IIII)V", "GetSetParameters_IIIIHandler")]
			public override unsafe void SetParameters (int p0, int p1, int p2, int p3)
			{
				const string __id = "setParameters.(IIII)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [4];
					__args [0] = new JniArgumentValue (p0);
					__args [1] = new JniArgumentValue (p1);
					__args [2] = new JniArgumentValue (p2);
					__args [3] = new JniArgumentValue (p3);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}

			static Delegate cb_startUsbReadRequest;
#pragma warning disable 0169
			static Delegate GetStartUsbReadRequestHandler ()
			{
				if (cb_startUsbReadRequest == null)
					cb_startUsbReadRequest = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_StartUsbReadRequest));
				return cb_startUsbReadRequest;
			}

			static void n_StartUsbReadRequest (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.StartUsbReadRequest ();
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='startUsbReadRequest' and count(parameter)=0]"
			[Register ("startUsbReadRequest", "()V", "GetStartUsbReadRequestHandler")]
			public override unsafe void StartUsbReadRequest ()
			{
				const string __id = "startUsbReadRequest.()V";
				try {
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
				} finally {
				}
			}

			static Delegate cb_stopUsbReadRequest;
#pragma warning disable 0169
			static Delegate GetStopUsbReadRequestHandler ()
			{
				if (cb_stopUsbReadRequest == null)
					cb_stopUsbReadRequest = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_StopUsbReadRequest));
				return cb_stopUsbReadRequest;
			}

			static void n_StopUsbReadRequest (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				__this.StopUsbReadRequest ();
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='stopUsbReadRequest' and count(parameter)=0]"
			[Register ("stopUsbReadRequest", "()V", "GetStopUsbReadRequestHandler")]
			public override unsafe void StopUsbReadRequest ()
			{
				const string __id = "stopUsbReadRequest.()V";
				try {
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
				} finally {
				}
			}

			static Delegate cb_write_arrayBI;
#pragma warning disable 0169
			static Delegate GetWrite_arrayBIHandler ()
			{
				if (cb_write_arrayBI == null)
					cb_write_arrayBI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_I (n_Write_arrayBI));
				return cb_write_arrayBI;
			}

			static int n_Write_arrayBI (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, int p1)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = (byte[]) JNIEnv.GetArray (native_p0, JniHandleOwnership.DoNotTransfer, typeof (byte));
				int __ret = __this.Write (p0, p1);
				if (p0 != null)
					JNIEnv.CopyArray (p0, native_p0);
				return __ret;
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='write' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
			[Register ("write", "([BI)I", "GetWrite_arrayBIHandler")]
			public override unsafe int Write (byte[] p0, int p1)
			{
				const string __id = "write.([BI)I";
				IntPtr native_p0 = JNIEnv.NewArray (p0);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_p0);
					__args [1] = new JniArgumentValue (p1);
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
					return __rm;
				} finally {
					if (p0 != null) {
						JNIEnv.CopyArray (native_p0, p0);
						JNIEnv.DeleteLocalRef (native_p0);
					}
					global::System.GC.KeepAlive (p0);
				}
			}

			static Delegate cb_writea_arrayBI;
#pragma warning disable 0169
			static Delegate GetWritea_arrayBIHandler ()
			{
				if (cb_writea_arrayBI == null)
					cb_writea_arrayBI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_I (n_Writea_arrayBI));
				return cb_writea_arrayBI;
			}

			static int n_Writea_arrayBI (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, int p1)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver.CdcAcmSerialPort> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
				var p0 = (byte[]) JNIEnv.GetArray (native_p0, JniHandleOwnership.DoNotTransfer, typeof (byte));
				int __ret = __this.Writea (p0, p1);
				if (p0 != null)
					JNIEnv.CopyArray (p0, native_p0);
				return __ret;
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver.CdcAcmSerialPort']/method[@name='writea' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
			[Register ("writea", "([BI)I", "GetWritea_arrayBIHandler")]
			public virtual unsafe int Writea (byte[] p0, int p1)
			{
				const string __id = "writea.([BI)I";
				IntPtr native_p0 = JNIEnv.NewArray (p0);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_p0);
					__args [1] = new JniArgumentValue (p1);
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
					return __rm;
				} finally {
					if (p0 != null) {
						JNIEnv.CopyArray (native_p0, p0);
						JNIEnv.DeleteLocalRef (native_p0);
					}
					global::System.GC.KeepAlive (p0);
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/phi/gertec/sat/serial/CdcAcmSerialDriver", typeof (CdcAcmSerialDriver));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected CdcAcmSerialDriver (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver']/constructor[@name='CdcAcmSerialDriver' and count(parameter)=1 and parameter[1][@type='android.hardware.usb.UsbDevice']]"
		[Register (".ctor", "(Landroid/hardware/usb/UsbDevice;)V", "")]
		public unsafe CdcAcmSerialDriver (global::Android.Hardware.Usb.UsbDevice p0) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Landroid/hardware/usb/UsbDevice;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((p0 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p0).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		static Delegate cb_getDevice;
#pragma warning disable 0169
		static Delegate GetGetDeviceHandler ()
		{
			if (cb_getDevice == null)
				cb_getDevice = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetDevice));
			return cb_getDevice;
		}

		static IntPtr n_GetDevice (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return JNIEnv.ToLocalJniHandle (__this.Device);
		}
#pragma warning restore 0169

		public virtual unsafe global::Android.Hardware.Usb.UsbDevice Device {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver']/method[@name='getDevice' and count(parameter)=0]"
			[Register ("getDevice", "()Landroid/hardware/usb/UsbDevice;", "GetGetDeviceHandler")]
			get {
				const string __id = "getDevice.()Landroid/hardware/usb/UsbDevice;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Android.Hardware.Usb.UsbDevice> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate cb_getPorts;
#pragma warning disable 0169
		static Delegate GetGetPortsHandler ()
		{
			if (cb_getPorts == null)
				cb_getPorts = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetPorts));
			return cb_getPorts;
		}

		static IntPtr n_GetPorts (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Phi.Gertec.Sat.Serial.CdcAcmSerialDriver> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return global::Android.Runtime.JavaList<global::Com.Phi.Gertec.Sat.Serial.IUsbSerialPort>.ToLocalJniHandle (__this.Ports);
		}
#pragma warning restore 0169

		public virtual unsafe global::System.Collections.Generic.IList<global::Com.Phi.Gertec.Sat.Serial.IUsbSerialPort> Ports {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver']/method[@name='getPorts' and count(parameter)=0]"
			[Register ("getPorts", "()Ljava/util/List;", "GetGetPortsHandler")]
			get {
				const string __id = "getPorts.()Ljava/util/List;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Android.Runtime.JavaList<global::Com.Phi.Gertec.Sat.Serial.IUsbSerialPort>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe global::System.Collections.Generic.IDictionary<global::Java.Lang.Integer, int[]> SupportedDevices {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.phi.gertec.sat.serial']/class[@name='CdcAcmSerialDriver']/method[@name='getSupportedDevices' and count(parameter)=0]"
			[Register ("getSupportedDevices", "()Ljava/util/Map;", "")]
			get {
				const string __id = "getSupportedDevices.()Ljava/util/Map;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Android.Runtime.JavaDictionary<global::Java.Lang.Integer, int[]>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

	}
}
